diff --git c/src/charon-nm/nm/nm_service.c i/src/charon-nm/nm/nm_service.c
index 8570ef0e3..11c595082 100644
--- c/src/charon-nm/nm/nm_service.c
+++ i/src/charon-nm/nm/nm_service.c
@@ -946,8 +946,31 @@ static gboolean connect_(NMVpnServicePlugin *plugin, NMConnection *connection,
 		child_cfg->add_proposal(child_cfg, proposal_create_default_aead(PROTO_ESP));
 		child_cfg->add_proposal(child_cfg, proposal_create_default(PROTO_ESP));
 	}
-	ts = traffic_selector_create_dynamic(0, 0, 65535);
-	child_cfg->add_traffic_selector(child_cfg, TRUE, ts);
+
+	str = nm_setting_vpn_get_data_item(vpn, "local-ts");
+	if (str && strlen(str)) {
+		enumerator = enumerator_create_token(str, ";", "");
+		while (enumerator->enumerate(enumerator, &str))
+		{
+			ts = traffic_selector_create_from_cidr((char*)str, 0, 0, 65535);
+			if (!ts)
+			{
+				g_set_error(err, NM_VPN_PLUGIN_ERROR,
+							NM_VPN_PLUGIN_ERROR_LAUNCH_FAILED,
+							"Invalid local traffic selector.");
+				enumerator->destroy(enumerator);
+				child_cfg->destroy(child_cfg);
+				peer_cfg->destroy(peer_cfg);
+				return FALSE;
+			}
+			child_cfg->add_traffic_selector(child_cfg, TRUE, ts);
+		}
+		enumerator->destroy(enumerator);
+	} else {
+		ts = traffic_selector_create_dynamic(0, 0, 65535);
+		child_cfg->add_traffic_selector(child_cfg, TRUE, ts);
+	}
+
 	str = nm_setting_vpn_get_data_item(vpn, "remote-ts");
 	if (str && strlen(str))
 	{
